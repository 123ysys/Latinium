munus main() {
    x: integer // Declaration, Variables are 0 initialized

    imprimo("Simple Odd or Even\n")
    dum x < 10 {
        si x % 2 == 0 {
            imprimo(x, " is even\n")
        } aliter {
            imprimo(x, " is odd\n")
        }
        x = x + 1 // Assignment
    }

    imprimo("\nChess Pattern\n")
    y: integer 
    z: integer 
    dum y < 10 {
        z = 0
        dum z < 10 {
            si (z + y % 2) % 2 == 0 {
                imprimo("#")
            } aliter{
                imprimo(" ")
            }
            z = z + 1
        }
        imprimo("\n")
        y = y + 1
    }

    imprimo("\nCircle Pattern\n")
    radius: integer = 10 // Declaration and Assignment. Not 0 initialized
    c1: integer = -radius
    c2: integer = -radius

    dum c1 <= radius {
        dum c2 <= radius {
            si c1*c1 + c2*c2 <= radius*radius {
                imprimo("#")
            } aliter{
                imprimo(" ")
            }
            c2 = c2 + 1
        }
        imprimo("\n")
        c1 = c1 + 1
        c2 = -radius
    }


    imprimo("\nFibonacci Sequence\n")
    a: integer
    b: integer = 1

    imprimo(b)
    dum b < 10000 {
        a = a + b
        b = a - b
        imprimo(" -> ", a)
    }imprimo("\n")
}
