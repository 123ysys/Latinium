munus mat_mul(a: &float, b: &float, c: &float, n: integer) {
    // Definir c como a matriz nula
    enim(i: integer = 0; i < n; i = i + 1) {
        enim(j: integer = 0; j < n; j = j + 1) {
            c[i*n + j] = 0.0
        }
    }

    // Calcular a multiplicação de matrizes
    enim(i: integer = 0; i < n; i = i + 1) {
        enim(j: integer = 0; j < n; j = j + 1) {
            enim(k: integer = 0; k < n; k = k + 1) {
                c[i*n + j] = c[i*n + j] + a[i*n + k] * b[k*n + j]
            }
        }
    }
}

munus mat_inverse(a: &float, Id: &float, n: integer) {
    // Obter a matriz Inversa a menos de uns fatores
    enim(i: integer = 0; i < n; i = i + 1) {
        enim(j: integer = 0; j < n; j = j + 1) {
            si i != j {
                r: float = a[j*n + i] / a[i*n + i]
                enim(k: integer = 0; k < n; k = k + 1) {
                    a[j*n + k] = a[j*n + k] - r * a[i*n + k]
                    Id[j*n + k] = Id[j*n + k] - r * Id[i*n + k]
                }
            }
        }
    }

    // Dividir cada linha por a[i][i]
    enim(i: integer = 0; i < n; i = i + 1) {
        enim(j: integer = 0; j < n; j = j + 1) {
            Id[i*n + j] = Id[i*n + j] / a[i*n + i]
        }
    }

    // Copiar a matriz inversa para a
    enim(i: integer = 0; i < n; i = i + 1) {
        enim(j: integer = 0; j < n; j = j + 1) {
            a[i*n + j] = Id[i*n + j]
        }
    }
}

munus escrever_matrix(a: &float, n: integer) {
    enim(i: integer = 0; i < n; i = i + 1) {
        enim(j: integer = 0; j < n; j = j + 1) {
            s: filum = " "
            si a[i*n + j] < 0.0 { s = "" }
            imprimo(s, a[i*n + j], "  ")
        }
        imprimo("\n")
    }
}

munus main() {
    m_1: vec<float>[3][3] = [
        1.0, 2.0, -1.0,
        -2.0, 0.0, 1.0,
        1.0, -1.0, 0.0
    ]
    m_2: vec<float>[3][3] = [
        1.0, 2.0, -1.0,
        -2.0, 0.0, 1.0,
        1.0, -1.0, 0.0
    ]
    I: vec<float>[3][3] = [
        1.0, 0.0, 0.0,
        0.0, 1.0, 0.0,
        0.0, 0.0, 1.0
    ]

    imprimo("Antes de Inverter:\n")
    escrever_matrix(m_1, 3)

    mat_inverse(m_1, I, 3)

    imprimo("Depois de Inverter:\n")
    escrever_matrix(m_1, 3)

    imprimo("Check:\n")
    mat_mul(m_1, m_2, I, 3)
    escrever_matrix(I, 3)
}

